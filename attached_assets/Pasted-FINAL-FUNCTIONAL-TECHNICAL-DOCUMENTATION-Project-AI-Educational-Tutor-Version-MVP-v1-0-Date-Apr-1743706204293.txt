FINAL FUNCTIONAL + TECHNICAL DOCUMENTATION
Project: AI Educational Tutor
Version: MVP v1.0
Date: April 3, 2025

1. General Description
A web-based educational platform powered by Gemini AI, where:

All educational content is dynamically generated from the database, including structured lessons, topics, subtopics, and resources.

Gemini acts as the primary tutor, narrating and guiding users through content generated on the fly.

Each subtopic includes two evaluations:

A quiz from the database.

A quiz generated live by Gemini via Function Calling, using the same source data but without duplicating questions.

Chat with Gemini is allowed before every quiz and final test.

A final lesson test concludes the experience with a calculated score and personalized feedback.

2. Lesson Structure
2.1 Lesson
Structure:

4 topics per lesson.

Each topic contains 4 subtopics.

Fetched dynamically via backend API and shared with both:

The frontend for visual rendering.

Gemini for lesson generation and narration.

2.2 Subtopic
Dynamic data retrieved from DB: title, objective, key concepts, and related resources.

Gemini generates a full explanation based on this input and narrates it with speak(text).

Users interact through buttons:

“Understood”

“Explain more simply”

“Show example/resource”

3. Interactive Resources
Field	Purpose
type	text, image, video, audio
description	What the resource contains
purpose	When the resource should be used (e.g., “to reinforce visuals”)
content_tags	Topics or keywords associated
recommended_when	Situational cue for AI (e.g., “if user gets stuck”)
AI uses semantic tags and conditions to decide when to surface each resource dynamically.

4. AI (Gemini) Role and Behavior
Gemini Responsibilities
Generates all subtopic content using structured input.

Reads the content aloud using speak(text).

Decides when to present each resource.

Opens a free-form chat before every quiz and test.

Generates a live quiz per subtopic using:

The subtopic’s structured data.

Avoiding duplication of questions from the DB quiz.

5. Evaluation System
5.1 Per Subtopic
Each subtopic includes two quizzes:

Quiz Type	Source	Method	Function Call
DB Quiz	Database	Pre-written questions from backend	start_db_quiz()
AI Quiz	Gemini (live)	Generated at runtime, unique	start_ai_quiz()
After both quizzes, the results are sent to Gemini for analysis and feedback using:

send_quiz_result(user_id, subtopic_id, answers[])

generate_quiz_feedback(...)

5.2 Per Topic
After 4 subtopics are completed:

Gemini opens chat mode.

Then launches a topic-level quiz using start_quiz(topic_id).

5.3 Final Test
Triggered after completing all topics in a lesson.

Uses questions from database.

Gemini offers final feedback, computed from:

Quiz results.

Final test.

Behavior metrics.

6. Function Calling Map
Function Name	Description
start_subtopic(id)	Starts content generation for a specific subtopic
speak(text)	Narrates text aloud using Gemini
show_resource(resource_id)	Displays a specific resource from DB
simplify_explanation()	Sends simplified explanation
repeat_last_explanation()	Repeats last AI-generated content
start_db_quiz(subtopic_id)	Starts database-based quiz
start_ai_quiz(subtopic_id)	Starts Gemini-generated quiz
open_chat_mode()	Opens chat with Gemini (before quizzes/final test only)
send_quiz_result(...)	Sends user answers and results
generate_feedback(...)	Returns personalized lesson feedback
calculate_final_score(...)	Computes final lesson score
mark_lesson_complete(...)	Flags the lesson as finished
7. Data-Driven Architecture
Every lesson, topic, subtopic, and resource is pulled dynamically from the backend, and:

The frontend uses the same structure as Gemini.

The AI always receives:

Subtopic title

Objective

Key tags

Associated resources

This enables both the UI and Gemini to stay in perfect sync for lesson delivery, evaluations, and feedback.

8. User Experience Flow
User selects a lesson → backend sends full lesson structure to UI and Gemini.

Gemini starts the first subtopic: generates, explains, and narrates.

After subtopic:

First quiz: from DB.

Second quiz: generated by Gemini.

At the end of each topic:

Gemini opens chat → user asks questions.

Gemini starts a topic-level quiz.

At end of the lesson:

Final chat with Gemini.

Final test.

Gemini computes score and gives personalized feedback.